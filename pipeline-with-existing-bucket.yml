AWSTemplateFormatVersion: '2010-09-09'
Description: 'CI/CD Pipeline for Small Business Invoices using existing S3 bucket'

Parameters:
  GitHubOwner:
    Type: String
    Default: smtandabuzo
    Description: GitHub owner/smtandabuzo
    
  RepositoryName:
    Type: String
    Default: small-business-invoices
    Description: GitHub repository name
    
  BranchName:
    Type: String
    Default: main
    Description: Branch to monitor for changes
    
  GitHubToken:
    Type: String
    Description: GitHub OAuth token for CodePipeline
    NoEcho: true

  ECSClusterName:
    Type: String
    Default: small-business-cluster
    
  ECSServiceName:
    Type: String
    Default: small-business-invoices-service
    
  ArtifactBucketName:
    Type: String
    Default: small-business-invoices-pipeline-artifacts
    Description: Name of the existing S3 bucket for pipeline artifacts

Resources:
  # CodeBuild IAM Role
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: codebuild-service
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:GetRepositoryPolicy'
                  - 'ecr:DescribeRepositories'
                  - 'ecr:ListImages'
                  - 'ecr:DescribeImages'
                  - 'ecr:BatchGetImage'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:UploadLayerPart'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:PutImage'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                  - 'ecs:RegisterTaskDefinition'
                  - 'ecs:DescribeTaskDefinition'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: !GetAtt ECSExecutionRole.Arn
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                Resource: !Sub 'arn:aws:s3:::${ArtifactBucketName}/*'

  # ECS Execution Role
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-execution-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:GetRepositoryPolicy'
                  - 'ecr:DescribeRepositories'
                  - 'ecr:ListImages'
                  - 'ecr:DescribeImages'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  # CodeBuild Project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${RepositoryName}-build'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:6.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: '810772959397.dkr.ecr.eu-north-1.amazonaws.com/small-business-invoices'
          - Name: AWS_DEFAULT_REGION
            Value: 'eu-north-1'
          - Name: AWS_ACCOUNT_ID
            Value: '810772959397'
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          env:
            variables:
              ECR_REPOSITORY_URI: "810772959397.dkr.ecr.eu-north-1.amazonaws.com/small-business-invoices"
              IMAGE_TAG: latest
          phases:
            install:
              runtime-versions:
                java: corretto17
              commands:
                - echo Installing Maven...
                - export MAVEN_VERSION=3.9.5
                - wget https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz
                - tar xzvf apache-maven-${MAVEN_VERSION}-bin.tar.gz
                - export PATH=$PATH:$(pwd)/apache-maven-${MAVEN_VERSION}/bin
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws --version
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                - export IMAGE_TAG=${COMMIT_HASH:=latest}
                - echo Build started on `date`
                - echo Building the Docker image...
                - mvn clean package -DskipTests
            build:
              commands:
                - echo Building the Docker image...
                - docker build -t $ECR_REPOSITORY_URI:$IMAGE_TAG .
                - docker tag $ECR_REPOSITORY_URI:$IMAGE_TAG $ECR_REPOSITORY_URI:latest
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $ECR_REPOSITORY_URI:$IMAGE_TAG
                - docker push $ECR_REPOSITORY_URI:latest
                - echo Writing image definitions file...
                - printf '[{"name":"small-business-invoices","imageUri":"%s"}]' $ECR_REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
          artifacts:
            files:
              - imagedefinitions.json
              - appspec.yml
              - taskdef.json
            name: $(date +%Y-%m-%dT%H%M%S)

  # CodePipeline IAM Role
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: codepipeline-service
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:UploadArchive'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:CancelUploadArchive'
                  - 'ecs:DescribeServices'
                  - 'ecs:DescribeTaskDefinition'
                  - 'ecs:DescribeTasks'
                  - 'ecs:ListTasks'
                  - 'ecs:RegisterTaskDefinition'
                  - 'ecs:UpdateService'
                  - 'iam:PassRole'
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                Resource: '*'

  # CodePipeline
  AppPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucketName
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref RepositoryName
                Branch: !Ref BranchName
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName: !Ref ECSClusterName
                ServiceName: !Ref ECSServiceName
                FileName: imagedefinitions.json
              InputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1
